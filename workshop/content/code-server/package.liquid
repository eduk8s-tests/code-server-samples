<style>
    pre.pastable {
        cursor: pointer;
    }
    pre.pastable_header {
      font-weight: bold;
      padding-bottom: 0px;
      background-color: BurlyWood;
    }

    span.editor_link {
        color: #007bff;
        text-decoration: none;
        background-color: transparent;
        cursor:pointer;
    }
    span.editor_link:hover {
       text-decoration:none;
       color: rgb(0, 86, 179);
       text-decoration:underline;
    }

    span.editor_command_link {
       color: #007bff;
       text-decoration: none;
       background-color: transparent;
       cursor:pointer;
    }
    span.editor_command_link:hover {
       text-decoration:none;
       color: rgb(0, 86, 179);
       text-decoration:underline;
    }
</style>
    
<script>

    function retryOnFail(name, retries, chunk) {
        var promise = chunk();
        promise.done(function () {
            console.log(name + " SUCCESS");
        })
        .fail(function (err) {
            // Internal server error means error executing stuff on the vscode side - no need to repeat it since we got to VSCode/Code-Server
            if (err.status !== 500) {
                console.log(name + " FAIL");
                if (retries>0) {
                        setTimeout(
                            function () {
                                console.log(name +" Retrying...");
                                retryOnFail(name, retries-1, chunk);
                            },
                            1000
                        );
                    }
            } else {
                // TODO: expect some object with a reason for failure and show it
            }
        });
    }

    function optQueryParam(name, val) {
        if (val) {
            return "&"+name+"="+encodeURIComponent(val)
        }
        return "";
    }

    var code_server = {
        url: "{{ingress_protocol}}://{{session_namespace}}.{{ingress_domain}}/code-server",

        open_file: function(file, lineno=1) {
            retryOnFail("code_server.open_file", 15, function () {
                eduk8s.expose_dashboard("editor");
                return $.get(code_server.url+"/editor/line?file="+encodeURIComponent(file)+"&line="+encodeURIComponent(lineno));
            });
        },

        execute_command: function(commandId, ...parameters) {
            retryOnFail("code_server.execute_command", 15, function () {
                eduk8s.expose_dashboard("editor");
                return $.ajax({
                    type: 'POST',
                    url: code_server.url+"/command/" + encodeURIComponent(commandId),
                    data: JSON.stringify(parameters),
                    contentType: "application/json",
                    dataType: 'text'
                });
            });
        },

        paste_in_file: function(file, prefix, yamlPath, paste) {
            console.log("paste = ''"+paste+"'");
            retryOnFail("code_server.paste_in_file", 15, function () {
                eduk8s.expose_dashboard("editor");
                var url = code_server.url+"/editor/paste?file="+encodeURIComponent(file)+
                    "&paste="+encodeURIComponent(paste) +
                    optQueryParam("yamlPath", yamlPath)+
                    optQueryParam("prefix", prefix)+
                    optQueryParam("paste");
                console.log("request url = "+url);
                return $.get(url);
            });
        }
    };

    //insprired by workshop-markdown.js
    $(document).ready(function() {
        $('pre.pastable').each(function() {
            let pasteText = $(this).text();
            let prefix = $(this).attr('data-prefix');
            let file = $(this).attr('data-file');
            let yamlPath = $(this).attr('data-yaml-path');
            $(this).empty();
            $(this).append('<span class="copy-glyph fas fa-copy" aria-hidden="true"></span>');
            $(this).append($('<pre class="pastable_header">').text(
                'file: '+file + (yamlPath ? "\nyamlPath: "+yamlPath : "")
            ));
            $(this).append($('<code>').text(pasteText));
            $(this).click(function(event) {
                console.log("Paste text = "+pasteText);
                console.log("Prefix = "+prefix);
                console.log("YamlPath = "+yamlPath);
                console.log("File = "+file);
                code_server.paste_in_file(file, prefix, yamlPath, pasteText);
            });
        })

        $('span.editor_link').each(function () {
            let text = $(this).text();
            let lineno = $(this).attr('data-line');
            let file = $(this).attr('data-file');
            if (!text) {
                //produce our own text from file and lineno
                text = file;
                if (lineno) {
                    text += ':' +lineno;
                } else {
                    lineno = 1;
                }
                $(this).text(text);
            }
            $(this).click(function () {
                code_server.open_file(file, lineno);
            });
        });

        $('span.editor_command_link').each(function () {
            const commandId = $(this).attr('data-command');
            const parameters = [];
            const self = this;
            const foundElements = $(this).find('parameter');
            foundElements.each(function() {
                const text = $(this).text();
                parameters.push(JSON.parse(text));
                $(this).remove();
                $(self).text($(self).text().trim());
            });
            if (commandId) {
                $(this).click(function () {
                    code_server.execute_command(commandId, ...parameters);
                });
            }
        });
    });

</script>
